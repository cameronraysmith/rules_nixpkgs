load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load(":location_expansion_unit_test.bzl", "expand_location_unit_test_suite")
load(":util.bzl", "is_bzlmod_enabled")

package(default_testonly = 1)

expand_location_unit_test_suite()

[
    # All of these tests use the "hello" binary to see
    # whether different invocations of `nixpkgs_package`
    # produce a valid bazel repository.
    sh_test(
        name = "run-{0}".format(test),
        timeout = "short",
        srcs = ["test_bin.sh"],
        args = ["$(location @{0}//:bin)".format(test)],
        data = ["@{}//:bin".format(test)],
    )
    for test in [
        "hello",
        "attribute-test",
        "nixpkgs-git-repository-test",
        "nixpkgs-http-repository-test",
        "nix-file-test",
        "nix-file-deps-test",
        "relative-imports",
        "expr-attribute-test",
        "extra-args-test",
        "expr-test",
        "nixpkgs-file-repository-test",
        "nixpkgs-local-repository-test",
        "flakehub-test",
    ]
] + [
    # These tests use the nix package generated by ./output.nix

    # Checks whether the `:include` filegroup of `nixpkgs_package`
    # repositories works as intended
    # (that the expected number of files are inside the target)
    sh_test(
        name = "run-test-include",
        timeout = "short",
        srcs = ["test_output.sh"],
        args = [
            "2",
            "$(locations {})".format("@output-filegroup-test//:include"),
        ],
        data = ["@output-filegroup-test//:include"],
    ),

    # Checks whether specifying a manual filegroup in the
    # `nixpkgs_package` BUILD file works as well.
    sh_test(
        name = "run-test-manual-filegroup",
        timeout = "short",
        srcs = ["test_output.sh"],
        args = [
            "3",
            "$(locations {})".format("@output-filegroup-manual-test//:manual-filegroup"),
        ],
        data = ["@output-filegroup-manual-test//:manual-filegroup"],
    ),
] + [
    # All of these tests use the "hello" binary to see
    # whether different invocations of `nixpkgs_flake_package`
    # produce a valid bazel repository.
    sh_test(
        name = "run-{0}".format(test),
        timeout = "short",
        srcs = ["test_bin.sh"],
        args = ["$(location @{0}//:bin)".format(test)],
        data = ["@{0}//:bin".format(test)],
    )
    for test in [
        "flake-hello",
        "flake-hello-with-build-file",
    ]
]

test_suite(
    name = "intermediate_module_tests",
    tests = [
        "@intermediate_module//:tests",
    ],
) if is_bzlmod_enabled() else None

# Test nixopts location expansion
test_suite(
    name = "location-expansion-test",
    tests = [
        "location-expansion-test-arg-external",
        "location-expansion-test-arg-local",
        "location-expansion-test-argstr-external",
        "location-expansion-test-argstr-local",
    ],
)

diff_test(
    name = "location-expansion-test-arg-local",
    file1 = "//tests:location_expansion/test_file",
    file2 = "@nixpkgs_location_expansion_test//:out/arg_local_file",
)

diff_test(
    name = "location-expansion-test-arg-external",
    file1 = "//tests:location_expansion/test_file",
    file2 = "@nixpkgs_location_expansion_test//:out/arg_external_file",
)

diff_test(
    name = "location-expansion-test-argstr-local",
    file1 = "//tests:location_expansion/test_file",
    file2 = "@nixpkgs_location_expansion_test//:out/argstr_local_file",
)

diff_test(
    name = "location-expansion-test-argstr-external",
    file1 = "//tests:location_expansion/test_file",
    file2 = "@nixpkgs_location_expansion_test//:out/argstr_external_file",
)
